##############################################################################
# This section is used to declare the minimizers to use for each fitting
# software. In most cases this can be left out and defaults will be sufficient
##############################################################################
[MINIMIZERS]

# To override the selection that is made by default, you should provide an
# entry for the software with a newline separated list of minimizers.
# default is all available minimizers as follows:

# dfogn: available minimimizers (dfogn)
#        for more information see
#        http://people.maths.ox.ac.uk/robertsl/dfogn/
dfogn: dfogn

# mantid: avaliable minimizers (BFGS,
#             Conjugate gradient (Fletcher-Reeves imp.),
#             Conjugate gradient (Polak-Ribiere imp.), Damped GaussNewton,
#             Levenberg-Marquardt, Levenberg-MarquardtMD, Simplex,
#             SteepestDescent, Trust Region)
#          for more information see
#          https://docs.mantidproject.org/nightly/fitting/fitminimizers/
mantid: BFGS
        Conjugate gradient (Fletcher-Reeves imp.)
        Conjugate gradient (Polak-Ribiere imp.)
        Damped GaussNewton
        Levenberg-Marquardt
        Levenberg-MarquardtMD
        Simplex
        SteepestDescent
        Trust Region

# minuit: available minimizers (minuit)
#         for more informations see
#         http://iminuit.readthedocs.org
minuit: minuit

# ralfit: available minimizers (gn, gn_reg, hybrid, hybrid_reg)
#         for more information see
#         https://ralfit.readthedocs.io/projects/Python/en/latest/
ralfit: gn
        gn_reg
        hybrid
        hybrid_reg

# sasview: available minimizers (amoeba, lm-bumps, newton, de, mp)
#          for more information see
#          https://bumps.readthedocs.io/en/latest/guide/optimizer.html
sasview: amoeba
         lm-bumps
         newton
         de
         mp

# scipy: available minimizers (lm-scipy, trf, dogbox)
#        for more information see
#        https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html
scipy: lm-scipy
       trf
       dogbox


##############################################################################
# The fitting section is used for options specific to running the benchmarking
##############################################################################
[FITTING]

# num_runs sets the number of runs to average each fit over
# default is 5
num_runs: 5

# software is used to select the fitting software to benchmark, this should be
# a newline-separated list
# default is dfon, mantid, ralfit, sasview, and scipy
software: dfogn
          mantid
          ralfit
          sasview
          scipy

# use_errors will switch between weighted and unweighted least squares
# default is True (yes/no can also be used)
use_errors: yes

##############################################################################
# The plotting section contains options to control how results are presented
##############################################################################
[PLOTTING]

# colour_scale lists thresholds for each colour in the html table
#              In the below example, this means that values less than 1.1 will
#              have the top ranking (brightest) and values over 3 will show as
#              the worst ranking (deep red). One can change the bounds (1.1,
#              1.33, etc) and the colouring here or within the run script.
# default thresholds are 1.1, 1.33, 1.75, 3, and inf
colour_scale: 1.1, #fef0d9
              1.33, #fdcc8a
              1.75, #fc8d59
              3, #e34a33
              inf, #b30000

# comparison_mode selects the mode for displaying values in the resulting
#                 table
#                 options are 'abs', 'rel', 'both'
#                 'abs' indicates that the absolute values should be displayed
#                 'rel' indicates that the values should all be relative to
#                       the best result
#                 'both' will show data in the form "abs (rel)"
# default is both
comparison_mode: both

# table_type selects the types of tables to be produced in FitBenchmarking
#                 options are 'acc', 'runtime', 'compare'
#                 'acc' indicates that the resulting table should contain the
#                       chi_sq values for each of the minimizers
#                 'runtime' indicates that the resulting table should contain
#                           the runtime values for each of the minimizers
#                 'compare' indicates that the resulting table should contain
#                           both the chi_sq value and runtime values for each
#                           of the minimizers. The tables produced have the
#                           chi_sq values on the top line of the cell and the
#                           runtime on the bottom line of the cell.
# default is 'acc', 'runtime', and 'compare'.
table_type: acc
            runtime
            compare

# results_dir is used to select where the output should be saved
# default is results
results_dir: results
